"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[53],{1109:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"category","collapsed":true,"collapsible":true,"label":"Start","items":[{"type":"link","label":"Index of Manual-Documentation","href":"/typegoose/docs/api/index-api","docId":"api/index-api"},{"type":"link","label":"Virtuals","href":"/typegoose/docs/api/virtuals","docId":"api/virtuals"},{"type":"link","label":"Environment Variables","href":"/typegoose/docs/api/environment-variables","docId":"api/environment-variables"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Decorators","items":[{"type":"link","label":"@prop","href":"/typegoose/docs/api/decorators/prop","docId":"api/decorators/prop"},{"type":"link","label":"@modelOptions","href":"/typegoose/docs/api/decorators/model-options","docId":"api/decorators/model-options"},{"type":"link","label":"@pre & @post","href":"/typegoose/docs/api/decorators/hooks","docId":"api/decorators/hooks"},{"type":"link","label":"@index","href":"/typegoose/docs/api/decorators/indexes","docId":"api/decorators/indexes"},{"type":"link","label":"@plugins","href":"/typegoose/docs/api/decorators/plugins","docId":"api/decorators/plugins"},{"type":"link","label":"@queryMethod","href":"/typegoose/docs/api/decorators/query-method","docId":"api/decorators/query-method"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Functions","items":[{"type":"link","label":"getModelForClass","href":"/typegoose/docs/api/functions/get-model-for-class","docId":"api/functions/get-model-for-class"},{"type":"link","label":"getClassForDocument","href":"/typegoose/docs/api/functions/get-class-for-document","docId":"api/functions/get-class-for-document"},{"type":"link","label":"getClass","href":"/typegoose/docs/api/functions/get-class","docId":"api/functions/get-class"},{"type":"link","label":"buildSchema","href":"/typegoose/docs/api/functions/build-schema","docId":"api/functions/build-schema"},{"type":"link","label":"getDiscriminatorModelForClass","href":"/typegoose/docs/api/functions/get-discriminator-model-for-class","docId":"api/functions/get-discriminator-model-for-class"},{"type":"link","label":"addModelToTypegoose","href":"/typegoose/docs/api/functions/add-model-to-typegoose","docId":"api/functions/add-model-to-typegoose"},{"type":"link","label":"buildSchema","href":"/typegoose/docs/api/functions/delete-model","docId":"api/functions/delete-model"},{"type":"link","label":"setGlobalOptions","href":"/typegoose/docs/api/functions/set-global-options","docId":"api/functions/set-global-options"},{"type":"link","label":"getModelWithString","href":"/typegoose/docs/api/functions/get-model-with-string","docId":"api/functions/get-model-with-string"},{"type":"link","label":"getName","href":"/typegoose/docs/api/functions/get-name","docId":"api/functions/get-name"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"TypeGuards","items":[{"type":"link","label":"isDocument & isDocumentArray","href":"/typegoose/docs/api/functions/typeguards/is-document","docId":"api/functions/typeguards/is-document"},{"type":"link","label":"isRefType & isRefTypeArray","href":"/typegoose/docs/api/functions/typeguards/is-ref-type","docId":"api/functions/typeguards/is-ref-type"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Types","items":[{"type":"link","label":"DocumentType<T>","href":"/typegoose/docs/api/types/document-type","docId":"api/types/document-type"},{"type":"link","label":"ReturnModelType<T, QueryHelpers>","href":"/typegoose/docs/api/types/return-model-type","docId":"api/types/return-model-type"},{"type":"link","label":"Ref<PopulatedType, RawId>","href":"/typegoose/docs/api/types/ref-type","docId":"api/types/ref-type"},{"type":"link","label":"Additional Types","href":"/typegoose/docs/api/types/additional-types","docId":"api/types/additional-types"}]}],"guides":[{"type":"category","collapsed":true,"collapsible":true,"label":"Getting Started","items":[{"type":"link","label":"Quick Start Guide","href":"/typegoose/docs/guides/quick-start-guide","docId":"guides/quick-start-guide"},{"type":"link","label":"FAQ","href":"/typegoose/docs/guides/faq","docId":"guides/faq"},{"type":"link","label":"Known Issues","href":"/typegoose/docs/guides/known-issues","docId":"guides/known-issues"},{"type":"link","label":"Mongoose Compatibility","href":"/typegoose/docs/guides/mongoose-compatibility","docId":"guides/mongoose-compatibility"},{"type":"link","label":"Deprecation Codes","href":"/typegoose/docs/guides/deprecation-codes","docId":"guides/deprecation-codes"},{"type":"link","label":"Error & Warning Details","href":"/typegoose/docs/guides/error-warning-details","docId":"guides/error-warning-details"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Guides","items":[{"type":"category","collapsed":true,"collapsible":true,"label":"Integration Examples","items":[{"type":"link","label":"Using with class-transformer","href":"/typegoose/docs/guides/integration-examples/using-with-class-transformer","docId":"guides/integration-examples/using-with-class-transformer"},{"type":"link","label":"Using with @deepkit/type","href":"/typegoose/docs/guides/integration-examples/using-with-deepkit-type","docId":"guides/integration-examples/using-with-deepkit-type"},{"type":"link","label":"Common Plugins","href":"/typegoose/docs/guides/integration-examples/common-plugins","docId":"guides/integration-examples/common-plugins"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Miscellaneous","items":[{"type":"link","label":"Typegoose Logger","href":"/typegoose/docs/guides/advanced/logger","docId":"guides/advanced/logger"},{"type":"link","label":"All Decorators","href":"/typegoose/docs/guides/all-decorators","docId":"guides/all-decorators"},{"type":"link","label":"Use Without \\"emitDecoratorMetadata\\"","href":"/typegoose/docs/guides/use-without-emitDecoratorMetadata","docId":"guides/use-without-emitDecoratorMetadata"},{"type":"link","label":"Motivation","href":"/typegoose/docs/guides/motivation","docId":"guides/motivation"}]},{"type":"link","label":"Default Classes","href":"/typegoose/docs/guides/default-classes","docId":"guides/default-classes"},{"type":"link","label":"Custom Types","href":"/typegoose/docs/guides/advanced/custom-types","docId":"guides/advanced/custom-types"},{"type":"link","label":"Array Types & Fields","href":"/typegoose/docs/guides/advanced/array-types","docId":"guides/advanced/array-types"},{"type":"link","label":"Models with same name","href":"/typegoose/docs/guides/advanced/models-with-same-name","docId":"guides/advanced/models-with-same-name"},{"type":"link","label":"Reference other Classes","href":"/typegoose/docs/guides/advanced/reference-other-classes","docId":"guides/advanced/reference-other-classes"},{"type":"link","label":"Change _id Type","href":"/typegoose/docs/guides/advanced/change-id-type","docId":"guides/advanced/change-id-type"},{"type":"link","label":"Using ObjectId Type","href":"/typegoose/docs/guides/advanced/using-objectid-type","docId":"guides/advanced/using-objectid-type"},{"type":"link","label":"Non-Nested Discriminators","href":"/typegoose/docs/guides/advanced/non-nested-discriminators","docId":"guides/advanced/non-nested-discriminators"},{"type":"link","label":"Nested Discriminators","href":"/typegoose/docs/guides/advanced/nested-discriminators","docId":"guides/advanced/nested-discriminators"},{"type":"link","label":"Typegoose\'s Name Generation","href":"/typegoose/docs/guides/advanced/name-generation","docId":"guides/advanced/name-generation"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Migration","items":[{"type":"link","label":"Migrate to 9.0.0","href":"/typegoose/docs/guides/migration/migrate-9","docId":"guides/migration/migrate-9"},{"type":"link","label":"Migrate to 8.0.0","href":"/typegoose/docs/guides/migration/migrate-8","docId":"guides/migration/migrate-8"},{"type":"link","label":"Migrate to 7.0.0","href":"/typegoose/docs/guides/migration/migrate-7","docId":"guides/migration/migrate-7"},{"type":"link","label":"Migrate to 6.0.0","href":"/typegoose/docs/guides/migration/migrate-6","docId":"guides/migration/migrate-6"}]}]},"docs":{"api/decorators/hooks":{"id":"api/decorators/hooks","title":"@pre & @post","description":"Don\'t forget to import these hooks with:","sidebar":"docs"},"api/decorators/indexes":{"id":"api/decorators/indexes","title":"@index","description":"@index(fields object) is used to set indexes","sidebar":"docs"},"api/decorators/model-options":{"id":"api/decorators/model-options","title":"@modelOptions","description":"@modelOptions(options: object) is used for setting options like schema options, an existing connect and/or an existing Mongoose.","sidebar":"docs"},"api/decorators/plugins":{"id":"api/decorators/plugins","title":"@plugins","description":"@plugin(mongoosePlugin any) => any, options: object) is used to add plugins to a class","sidebar":"docs"},"api/decorators/prop":{"id":"api/decorators/prop","title":"@prop","description":"@prop(options PropType) is used for setting properties in a Class (without this set, it is just a type and will NOT be in the final model/document)","sidebar":"docs"},"api/decorators/query-method":{"id":"api/decorators/query-method","title":"@queryMethod","description":"@queryMethod(func ReturnModelType, ...args: any]) => mongoose.DocumentQuery) is a decorator to add [custom query methods","sidebar":"docs"},"api/environment-variables":{"id":"api/environment-variables","title":"Environment Variables","description":"Typegoose allows the use of some environment variables to set global options.","sidebar":"docs"},"api/functions/add-model-to-typegoose":{"id":"api/functions/add-model-to-typegoose","title":"addModelToTypegoose","description":"addModelToTypegoose(model: mongoose.model, class) is used to get a model with TypeScript type information and to allow getClassForDocument to work.","sidebar":"docs"},"api/functions/assertions":{"id":"api/functions/assertions","title":"assertion","description":"assertion"},"api/functions/build-schema":{"id":"api/functions/build-schema","title":"buildSchema","description":"buildSchema(class) gets the schema from a class to modify the schema before making the model.","sidebar":"docs"},"api/functions/delete-model":{"id":"api/functions/delete-model","title":"buildSchema","description":"deleteModel","sidebar":"docs"},"api/functions/get-class":{"id":"api/functions/get-class","title":"getClass","description":"getClass(input: any) gets the class in a variety of ways.","sidebar":"docs"},"api/functions/get-class-for-document":{"id":"api/functions/get-class-for-document","title":"getClassForDocument","description":"getClassForDocument(doc: DocumentType) gets the Class used in the model creation.","sidebar":"docs"},"api/functions/get-discriminator-model-for-class":{"id":"api/functions/get-discriminator-model-for-class","title":"getDiscriminatorModelForClass","description":"getDiscriminatorModelForClass(from string) gets a model for a given discriminator.","sidebar":"docs"},"api/functions/get-model-for-class":{"id":"api/functions/get-model-for-class","title":"getModelForClass","description":"getModelForClass(class, overwriteOptions) gets a model for a given class. If no Mongoose Model exists for this class yet, one will be created automatically.","sidebar":"docs"},"api/functions/get-model-with-string":{"id":"api/functions/get-model-with-string","title":"getModelWithString","description":"getModelWithString(key) retrieves a model with the given key. If no Mongoose model exists in Typegoose\'s internal cache, it will return undefined.","sidebar":"docs"},"api/functions/get-name":{"id":"api/functions/get-name","title":"getName","description":"getName(class) gets the name of the resulting model (accounts for customName & automaticName)","sidebar":"docs"},"api/functions/set-global-options":{"id":"api/functions/set-global-options","title":"setGlobalOptions","description":"setGlobalOptions(options) is used to set the global Options.","sidebar":"docs"},"api/functions/typeguards/is-document":{"id":"api/functions/typeguards/is-document","title":"isDocument & isDocumentArray","description":"isDocument","sidebar":"docs"},"api/functions/typeguards/is-ref-type":{"id":"api/functions/typeguards/is-ref-type","title":"isRefType & isRefTypeArray","description":"isRefType","sidebar":"docs"},"api/index-api":{"id":"api/index-api","title":"Index of Manual-Documentation","description":"This Documentation is manually written","sidebar":"docs"},"api/types/additional-types":{"id":"api/types/additional-types","title":"Additional Types","description":"You might want to use Additional / internal Types. It is easy to import them via import * from \'@typegoose/typegoose/lib/types\'.","sidebar":"docs"},"api/types/document-type":{"id":"api/types/document-type","title":"DocumentType<T>","description":"previously known as InstanceType","sidebar":"docs"},"api/types/ref-type":{"id":"api/types/ref-type","title":"Ref<PopulatedType, RawId>","description":"The Type Ref is the type used for References.","sidebar":"docs"},"api/types/return-model-type":{"id":"api/types/return-model-type","title":"ReturnModelType<T, QueryHelpers>","description":"The Type ReturnModelType is the type used to have type information for a class converted to a Mongoose Model.","sidebar":"docs"},"api/virtuals":{"id":"api/virtuals","title":"Virtuals","description":"get & set","sidebar":"docs"},"guides/advanced/array-types":{"id":"guides/advanced/array-types","title":"Array Types & Fields","description":"Array types & Fields","sidebar":"guides"},"guides/advanced/change-id-type":{"id":"guides/advanced/change-id-type","title":"Change _id Type","description":"You can easily change the type of the _id field by doing:","sidebar":"guides"},"guides/advanced/custom-types":{"id":"guides/advanced/custom-types","title":"Custom Types","description":"A Custom Type needs to have the following properties for Typegoose to work:","sidebar":"guides"},"guides/advanced/logger":{"id":"guides/advanced/logger","title":"Typegoose Logger","description":"Typegoose uses loglevel to make some soft-errors and for debugging.","sidebar":"guides"},"guides/advanced/models-with-same-name":{"id":"guides/advanced/models-with-same-name","title":"Models with same name","description":"This Guide shows all the possibilities for a model to use different names.","sidebar":"guides"},"guides/advanced/name-generation":{"id":"guides/advanced/name-generation","title":"Typegoose\'s Name Generation","description":"In Typegoose the name generation can vary somewhat, this guide will explain all possible ways a name gets generated.","sidebar":"guides"},"guides/advanced/nested-discriminators":{"id":"guides/advanced/nested-discriminators","title":"Nested Discriminators","description":"Use-Case","sidebar":"guides"},"guides/advanced/non-nested-discriminators":{"id":"guides/advanced/non-nested-discriminators","title":"Non-Nested Discriminators","description":"Use-Case","sidebar":"guides"},"guides/advanced/reference-other-classes":{"id":"guides/advanced/reference-other-classes","title":"Reference other Classes","description":"Look here for the Ref type documentation","sidebar":"guides"},"guides/advanced/using-objectid-type":{"id":"guides/advanced/using-objectid-type","title":"Using ObjectId Type","description":"Using the type ObjectId can be done by defining it as follows:","sidebar":"guides"},"guides/all-decorators":{"id":"guides/all-decorators","title":"All Decorators","description":"This Page shows all the decorators that can be used for / in a class.","sidebar":"guides"},"guides/default-classes":{"id":"guides/default-classes","title":"Default Classes","description":"This Guide contains all default classes Typegoose provides.","sidebar":"guides"},"guides/deprecation-codes":{"id":"guides/deprecation-codes","title":"Deprecation Codes","description":"Deprecation Codes","sidebar":"guides"},"guides/error-warning-details":{"id":"guides/error-warning-details","title":"Error & Warning Details","description":"Errors","sidebar":"guides"},"guides/faq":{"id":"guides/faq","title":"FAQ","description":"Repository","sidebar":"guides"},"guides/integration-examples/common-plugins":{"id":"guides/integration-examples/common-plugins","title":"Common Plugins","description":"Typegoose supports mongoose plugins. Here\'s how to use some common plugins:","sidebar":"guides"},"guides/integration-examples/using-with-class-transformer":{"id":"guides/integration-examples/using-with-class-transformer","title":"Using with class-transformer","description":"Last updated for:","sidebar":"guides"},"guides/integration-examples/using-with-deepkit-type":{"id":"guides/integration-examples/using-with-deepkit-type","title":"Using with @deepkit/type","description":"Last updated for:","sidebar":"guides"},"guides/known-issues":{"id":"guides/known-issues","title":"Known Issues","description":"Known Issues","sidebar":"guides"},"guides/migration/migrate-6":{"id":"guides/migration/migrate-6","title":"Migrate to 6.0.0","description":"These are the changes made for 6.0.0 that are breaking or just important to know.","sidebar":"guides"},"guides/migration/migrate-7":{"id":"guides/migration/migrate-7","title":"Migrate to 7.0.0","description":"These are the changes made for 7.0.0 that are breaking or just important to know","sidebar":"guides"},"guides/migration/migrate-8":{"id":"guides/migration/migrate-8","title":"Migrate to 8.0.0","description":"These are the changes made for 8.0.0 that are breaking or just important to know","sidebar":"guides"},"guides/migration/migrate-9":{"id":"guides/migration/migrate-9","title":"Migrate to 9.0.0","description":"These are the changes made for 9.0.0 that are breaking or just important to know","sidebar":"guides"},"guides/mongoose-compatibility":{"id":"guides/mongoose-compatibility","title":"Mongoose Compatibility","description":"The version values use npm\'s semver convention.","sidebar":"guides"},"guides/motivation":{"id":"guides/motivation","title":"Motivation","description":"A common problem when using Mongoose with TypeScript is that you have to define both the Mongoose model and the TypeScript interface. If the model changes, you also have to keep the TypeScript interface file in sync or the TypeScript interface would not represent the real data structure of the model.","sidebar":"guides"},"guides/quick-start-guide":{"id":"guides/quick-start-guide","title":"Quick Start Guide","description":"Quick Overview of Typegoose","sidebar":"guides"},"guides/use-without-emitDecoratorMetadata":{"id":"guides/use-without-emitDecoratorMetadata","title":"Use Without \\"emitDecoratorMetadata\\"","description":"Typegoose can be used without the option emitDecoratorMetadata, but it is generally recommeneded to enable it for auto-inferring from the typescript type.","sidebar":"guides"},"test":{"id":"test","title":"Docusaurus Testing","description":"This file is meant to show what Docusaurus is capable of and how it looks in this projects styles"}}}')}}]);